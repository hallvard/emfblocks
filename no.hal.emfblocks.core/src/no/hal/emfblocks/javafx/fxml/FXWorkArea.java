package no.hal.emfblocks.javafx.fxml;

import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.transform.Affine;
import no.hal.emfblocks.WRoot;
import no.hal.emfblocks.WWorkArea;

public class FXWorkArea extends Pane implements WPaneUI
{	
	private WWorkArea model;
	private Pane blockContainerPane;
	
	private Button zoomResetButton, zoomOutButton, zoomInButton;
	private Affine blockContainerTransform;
	
	/**Create an FXWorkArea without a model object. 
	 * The model object must be assigned later. There are two mechanisms for this.
	 * <ul>
	 * <li>The model object can be automatically generated by calling {@link #getModel(WRoot)}</li>
	 * <li>The model object can be explicitly set by calling {@link #setModel(WWorkArea)}</li>
	 * </ul>
	 * If {@link WRoot#installContentPane(javafx.scene.Parent)} is called and this object is in the node structure, 
	 * then model objects are automatically created using the first mechanism, unless they have already been assigned.*/
	public FXWorkArea()
	{
		this(null);
	}
	/**Create an FXWorkArea using the default background color, and immediately assign the model object.*/
	public FXWorkArea(WWorkArea model)
	{
		this(model, Color.LIGHTGRAY);
	}
	/**Create an FXWorkArea and immediately assign the model object.*/
	public FXWorkArea(WWorkArea model, Color bgColor)
	{
		super();
		blockContainerPane = new Pane();
		blockContainerTransform = new Affine();//Identity
		blockContainerPane.getTransforms().add(blockContainerTransform);
		getChildren().add(blockContainerPane);

		Insets nothing = new Insets(0, 3, 0, 3);
		Font monospace = Font.font("Monospace", 13);
		String buttonColor = "-fx-base: #CACACA80;";
		zoomResetButton = new Button("\u29E0");
		zoomResetButton.setStyle(buttonColor);
		zoomResetButton.setFont(monospace);
		zoomResetButton.setPadding(nothing);
		zoomResetButton.prefWidthProperty().set(22);
		zoomResetButton.setTooltip(new Tooltip("Reset Zoom"));
		zoomResetButton.setOnAction((a) -> {model.setScale(1.0);});
		getChildren().add(zoomResetButton);
		zoomOutButton = new Button("-");
		zoomOutButton.setStyle(buttonColor);
		zoomOutButton.setFont(monospace);
		zoomOutButton.setPadding(nothing);
		zoomOutButton.prefWidthProperty().set(22);
		zoomOutButton.setTooltip(new Tooltip("Zoom Out"));
		zoomOutButton.setOnAction((a) -> {model.setScale(previousPowerOf(model.getScale(), 1.3333));});
		getChildren().add(zoomOutButton);
		zoomInButton = new Button("+");
		zoomInButton.setStyle(buttonColor);
		zoomInButton.setFont(monospace);
		zoomInButton.setPadding(nothing);
		zoomInButton.prefWidthProperty().set(22);
		zoomInButton.setOnAction((a) -> {model.setScale(nextPowerOf(model.getScale(), 1.3333));});
		zoomInButton.setTooltip(new Tooltip("Zoom In"));
		getChildren().add(zoomInButton);
		setBackground(new Background(new BackgroundFill(bgColor, CornerRadii.EMPTY, Insets.EMPTY)));
		if(model != null)
			setModel(model);
	}
	private double previousPowerOf(double x, double exp) {
		double log = Math.round(Math.log(x)/Math.log(exp))-1;
		return Math.pow(exp, log);
	}

	private double nextPowerOf(double x, double exp) {
		double log = Math.round(Math.log(x)/Math.log(exp))+1;
		return Math.pow(exp, log);
	}
	@Override
	public WWorkArea getModel(WRoot root)
	{
		if(model == null)
		{
			WWorkArea m = new WWorkArea(root, this);
			//root.add(m);
			setModel(m);
		}
		else
			assert model.getRoot() == root : this+" was assigned to root "+root+", but the model's root is "+model.getRoot()+"!";
		return model;
	}
	
	@Override
	protected void layoutChildren() {
		super.layoutChildren();
		zoomInButton.layoutXProperty().set(getWidth()-24);
		zoomInButton.layoutYProperty().set(getHeight()-18);
		zoomResetButton.layoutXProperty().set(getWidth()-48);
		zoomResetButton.layoutYProperty().set(getHeight()-18);
		zoomOutButton.layoutXProperty().set(getWidth()-72);
		zoomOutButton.layoutYProperty().set(getHeight()-18);
	}

	/**Sets the model to the specified instance. The panel will be cleared of any blocks from the old model if necessary.*/
	public void setModel(WWorkArea m)
	{
		if(model != null)
			new Throwable("Warning: "+this+" already has its model set to: "+model+"!!");
		model = m;
		blockContainerPane.getChildren().clear();
	}
	public Pane getBlockContainerPane() {
		return blockContainerPane;
	}
	
	public Affine getBlockContainerTransform()
	{
		return blockContainerTransform;
	}
}
